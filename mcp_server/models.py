# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:15:49+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Answer(RootModel[constr(min_length=1, max_length=10000)]):
    root: constr(min_length=1, max_length=10000)


class ClientId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class ClientLimitExceededException(RootModel[Any]):
    root: Any


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidClientException(RootModel[Any]):
    root: Any


class MessagePayload(
    RootModel[constr(pattern=r'[a-zA-Z0-9+/=]+', min_length=1, max_length=10000)]
):
    root: constr(pattern=r'[a-zA-Z0-9+/=]+', min_length=1, max_length=10000)


class NotAuthorizedException(RootModel[Any]):
    root: Any


class Password(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class ResourceARN(
    RootModel[
        constr(
            pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        min_length=1,
        max_length=1024,
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SendAlexaOfferToMasterRequest(BaseModel):
    ChannelARN: ResourceARN
    MessagePayload_1: MessagePayload = Field(..., alias='MessagePayload')
    SenderClientId: ClientId


class SendAlexaOfferToMasterResponse(BaseModel):
    Answer_1: Optional[Answer] = Field(None, alias='Answer')


class Service(Enum):
    TURN = 'TURN'


class SessionExpiredException(RootModel[Any]):
    root: Any


class Ttl(RootModel[conint(ge=30, le=86400)]):
    root: conint(ge=30, le=86400)


class Uri(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Uris(RootModel[List[Uri]]):
    root: List[Uri]


class Username(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class V1GetIceServerConfigPostRequest(BaseModel):
    ChannelARN: constr(
        pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        min_length=1,
        max_length=1024,
    ) = Field(
        ...,
        description='The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. ',
    )
    ClientId: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='Unique identifier for the viewer. Must be unique within the signaling channel.',
    )
    Service_1: Optional[Service] = Field(
        None,
        alias='Service',
        description='Specifies the desired service. Currently, <code>TURN</code> is the only valid value.',
    )
    Username: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None, description='An optional user ID to be associated with the credentials.'
    )


class V1SendAlexaOfferToMasterPostRequest(BaseModel):
    ChannelARN: constr(
        pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        min_length=1,
        max_length=1024,
    ) = Field(
        ...,
        description='The ARN of the signaling channel by which Alexa and the master peer communicate.',
    )
    MessagePayload: constr(
        pattern=r'[a-zA-Z0-9+/=]+', min_length=1, max_length=10000
    ) = Field(..., description='The base64-encoded SDP offer content.')
    SenderClientId: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256) = (
        Field(..., description='The unique identifier for the sender client.')
    )


class GetIceServerConfigRequest(BaseModel):
    ChannelARN: ResourceARN
    ClientId_1: Optional[ClientId] = Field(None, alias='ClientId')
    Service_1: Optional[Service] = Field(None, alias='Service')
    Username_1: Optional[Username] = Field(None, alias='Username')


class IceServer(BaseModel):
    Password_1: Optional[Password] = Field(None, alias='Password')
    Ttl_1: Optional[Ttl] = Field(None, alias='Ttl')
    Uris_1: Optional[Uris] = Field(None, alias='Uris')
    Username_1: Optional[Username] = Field(None, alias='Username')


class IceServerList(RootModel[List[IceServer]]):
    root: List[IceServer]


class GetIceServerConfigResponse(BaseModel):
    IceServerList_1: Optional[IceServerList] = Field(None, alias='IceServerList')
